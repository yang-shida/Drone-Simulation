#version 330 core

// Interpolated values from the vertex shaders
in vec2 UV;
in vec3 Normal_cameraspace;
in vec3 LightDirection_cameraspace;

// Ouput data
out vec4 color;

// Values that stay constant for the whole mesh.
uniform sampler2D myTextureSampler;
uniform bool useColor;		// use color or texture
uniform float colorIntensity;	// color intensity (used by UAVs)

void main(){
	// use color (sphere)
	if(useColor)
	{
		// light color (white)
		vec3 LightColor = vec3(1,1,1);
		float LightPower = 1.0f;

		// Material properties
		vec3 MaterialDiffuseColor = vec3(1,1,1);
		vec3 MaterialAmbientColor = vec3(0.5,0.5,0.5) * MaterialDiffuseColor;

		// Normal of the computed fragment, in camera space
		vec3 n = normalize( Normal_cameraspace );
		// Direction of the light (from the fragment to the light)
		vec3 l = normalize( LightDirection_cameraspace );
		// Cosine of the angle between the normal and the light direction, 
		// clamped above 0
		//  - light is at the vertical of the triangle -> 1
		//  - light is perpendicular to the triangle -> 0
		//  - light is behind the triangle -> 0
		float cosTheta = clamp( dot( n,l ), 0,1 );

		color.rgb = 
			// Ambient : simulates indirect lighting
			MaterialAmbientColor +
			// Diffuse : "color" of the object
			MaterialDiffuseColor * LightColor * LightPower * cosTheta;
		

		// semi-transparent so we can see UAVs bebind the sphere
		color.a =0.3;
	}
	// use texture (UAV and football field)
	else
	{
		// light color (white)
		vec3 LightColor = vec3(1,1,1);
		float LightPower = 1.0f;

		// Material properties
		vec3 MaterialDiffuseColor = texture( myTextureSampler, UV ).rgb*colorIntensity;
		vec3 MaterialAmbientColor = vec3(0.25,0.25,0.25) * MaterialDiffuseColor;

		// Normal of the computed fragment, in camera space
		vec3 n = normalize( Normal_cameraspace );
		// Direction of the light (from the fragment to the light)
		vec3 l = normalize( LightDirection_cameraspace );
		// Cosine of the angle between the normal and the light direction, 
		// clamped above 0
		//  - light is at the vertical of the triangle -> 1
		//  - light is perpendicular to the triangle -> 0
		//  - light is behind the triangle -> 0
		float cosTheta = clamp( dot( n,l ), 0,1 );

		color.rgb = 
			// Ambient : simulates indirect lighting
			MaterialAmbientColor +
			// Diffuse : "color" of the object
			MaterialDiffuseColor * LightColor * LightPower * cosTheta;
		color.a = 1.0;
	}
	

}